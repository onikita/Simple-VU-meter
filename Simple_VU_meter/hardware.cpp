/****************************************************************************
  * Файл:           hardware.cpp
  * Автор:          Никита О.
  * Дата:           17.04.2017
  * Организация:    PhSound
  * Наш сайт:       PhSound.ru
  * e-mail:         PhSound@mail.ru
****************************************************************************/

#include "function.h"

/***************************************************************************/
/* Сброс настроек контроллера, сделанных средой Arduino                    */
/***************************************************************************/
void reset_arduino_settings()
{ 
// Таймер 0 
  TCCR0B = 0x00; // сброс
  TCCR0A = 0x00; //       настроек
  TIMSK0 = 0x00; // запрет прерываний
  TCNT0  = 0x00; // сброс счётного регистра
  TIFR0  = 0xFF; // очистка флагов прерываний
// Таймер 1  
  TCCR1B = 0x00; // сброс
  TCCR1A = 0x00; //       настроек
  TIMSK1 = 0x00; // запрет прерываний
  TCNT1  = 0x00; // сброс счётного регистра
  TIFR1  = 0xFF; // очистка флагов прерываний
// Таймер 2
  TCCR2B = 0x00; // сброс
  TCCR2A = 0x00; //       настроек
  TIMSK2 = 0x00; // запрет прерываний
  TCNT2  = 0x00; // сброс счётного регистра
  TIFR2  = 0xFF; // очистка флагов прерываний
// АЦП
  ADCSRA = 0;  // сброс настроек и выключение АЦП
// USART
  UCSR0B = 0x00;
  #if !defined(DEBUG_UART)
    UCSR0A = 0x00;
    UCSR0C = 0x00;
    UBRR0H = 0x00;
    UBRR0L = 0x00;
  #endif
}
/***************************************************************************/
/* Настройка, используемых ножек контроллера                               */
/***************************************************************************/
void pins_init() 
{
  io_hiz(ADC_REF); // Arduino A0
  io_hiz(ADC_CH1); // Arduino A1
  io_hiz(ADC_CH2); // Arduino A2
  
  io_out(SPI_MOSI); // Arduino 11
  io_out(SPI_CS);   // Arduino 10 - не используется, но без настроки не работает SPI
}
/***************************************************************************/
/* Настройка интерфейса передачи данных на светодиоды                      */
/***************************************************************************/
void data_transfer_interface_init()
{
  // включаем SPI, работаем как MASTER
  // 1 или 3 режим SPI (чтобы сигнал MOSI был в 0, когда нет сигнала)
  SPCR  = (1<<SPE)|(1<<MSTR)|(1<<CPHA);
  // работаем на 8 MHz (1 байт SPI = 1 бит кодировки цвета)
  SPSR = (1<<SPI2X); // Freq*2
}
/***************************************************************************/
/* Настройка АЦП для измерения аудиосигнала                                */
/***************************************************************************/
void ADC_init()
{
  // источник опорного напряжения: AVCC;
  // ADLAR = 0 => значение берём из ADCL и ADCH<<8
  ADMUX = (1<<REFS0);
  // вкл. АЦП; запускаем преобразования; частота АЦП: F/128
  ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); 
}
/***************************************************************************/
/* Настройка таймера 2 для периодических прерываний                        */
/***************************************************************************/
void timer2_init()
{
  TCCR2B = 0x00;                          // остановка таймера
  TCNT2  = 0x00;                          // сброс счётного регистра
  OCR2A  = (uint32_t)((float)(QUARZ/1024)*TIME_UPDATE_LEDS)/1000-1; // коэф. периода прерываний
  TCCR2A = (1<<WGM21);                    // режим: CTC (сброс при совпадении)
  TIFR2  = 0xFF;                          // очистка флагов прерываний
  TIMSK2 = (1<<OCIE2A);                   // прерывание по совпадению с OCR2A
  TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // делитель 1024 и старт таймера
}
/***************************************************************************/
/* Инициализация контроллера                                               */
/***************************************************************************/
void Hardware_Init()
{
  __disable_interrupt();    // глобальный запрет прерываний перед настройкой периферии
  reset_arduino_settings(); // сброс настроек периферии, сделанных ардуиной
  pins_init();              // настройка портов ввода/вывода
  data_transfer_interface_init(); // настройка интерфейса передачи данных (SPI/UART)
  ADC_init();               // инициализация внутреннего АЦП
  #if defined(DEBUG_UART)
   Serial.begin(9600);      // инициализация последовательного порта для тестирования
  #endif
  timer2_init();            // настройка таймера 2 для отсчёта временных интервалов
  __enable_interrupt();     // глобальное разрешение прерываний после настройки периферии
}
